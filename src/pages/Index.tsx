import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import * as XLSX from 'xlsx';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';

interface SubjectData {
  id: number;
  district: string;
  region: string;
  city: string;
  head: string;
  position: string;
  email: string;
  phone: string;
  status: 'valid' | 'invalid' | 'pending';
}

const mockData: SubjectData[] = [
  {
    id: 1,
    district: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    region: '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    city: '–ê–ª–µ–∫—Å–µ–µ–≤–∫–∞',
    head: '–•–≤–æ—Ä–æ—Å—Ç—è–Ω –ü–∞–≤–µ–ª –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    email: 'al34gorod-adm@yandex.ru',
    phone: '74723431020',
    status: 'invalid'
  },
  {
    id: 2,
    district: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    region: '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    city: '–ê–ª–µ–∫—Å–∏–Ω',
    head: '–≠–∫—Å–∞—Ä–µ–Ω–∫–æ –≠–¥—É–∞—Ä–¥ –ò–≤–∞–Ω–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    email: 'adm.aleksin@tularegion.ru',
    phone: '8(48753) 4-03-92',
    status: 'valid'
  },
  {
    id: 3,
    district: '–°–∏–±–∏—Ä—Å–∫–∏–π',
    region: '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    city: '–ê–ª–∑–∞–º–∞–π',
    head: '–õ–µ–±–µ–¥–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
    email: 'alzamai@inbox.ru',
    phone: '73955761536',
    status: 'pending'
  },
  {
    id: 4,
    district: '–Æ–∂–Ω—ã–π',
    region: '–ö—Ä—ã–º',
    city: '–ê–ª—É–ø–∫–∞',
    head: '–õ–∏—Ç–≤–∏–Ω–æ–≤–∞ –û–ª—å–≥–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞',
    position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞',
    email: 'alupka_ags@yalta.rk.gov.ru',
    phone: '7(3654) -72-22-34',
    status: 'invalid'
  },
  {
    id: 5,
    district: '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π',
    region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
    city: '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫',
    head: '–ù–∞–≥—É–º–∞–Ω–æ–≤ –¢–∏–º—É—Ä –î–º–∏—Ç—Ä–∏–µ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞',
    email: 'Almat@tatar.ru',
    phone: '78553390102',
    status: 'valid'
  },
  {
    id: 6,
    district: '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π',
    region: '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π',
    city: '–ê–º—É—Ä—Å–∫',
    head: '–ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤ –†—É—Å–ª–∞–Ω –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –ø–æ—Å–µ–ª–µ–Ω–∏—è',
    email: 'gorod@mail.amursk.ru',
    phone: '74214222268',
    status: 'pending'
  },
  {
    id: 7,
    district: '–Æ–∂–Ω—ã–π',
    region: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
    city: '–ê–Ω–∞–ø–∞',
    head: '–®–≤–µ—Ü –í–∞—Å–∏–ª–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
    email: 'anapa@mo.krasnodar.ru',
    phone: '78613339512',
    status: 'valid'
  },
  {
    id: 8,
    district: '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π',
    region: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    city: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
    head: '–ú–æ—Ä–µ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
    position: '–ì–ª–∞–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
    email: 'adminkir@arhcity.ru',
    phone: '78182607101',
    status: 'invalid'
  }
];

export default function Index() {
  const [data, setData] = useState(mockData);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterDistrict, setFilterDistrict] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [isVerifying, setIsVerifying] = useState(false);
  const { toast } = useToast();

  const districts = Array.from(new Set(data.map(item => item.district)));
  
  const filteredData = data.filter(item => {
    const matchesSearch = 
      item.city.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.head.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.region.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesDistrict = filterDistrict === 'all' || item.district === filterDistrict;
    const matchesStatus = filterStatus === 'all' || item.status === filterStatus;
    
    return matchesSearch && matchesDistrict && matchesStatus;
  });

  const stats = {
    total: data.length,
    valid: data.filter(d => d.status === 'valid').length,
    invalid: data.filter(d => d.status === 'invalid').length,
    pending: data.filter(d => d.status === 'pending').length
  };

  const verifyAndUpdateRecord = async (id: number) => {
    setIsVerifying(true);
    toast({
      title: 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ',
      description: '–ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...'
    });

    setTimeout(() => {
      setData(prevData => 
        prevData.map(item => {
          if (item.id === id && item.status === 'invalid') {
            const updatedData = getUpdatedData(item.city);
            toast({
              title: '‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
              description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${item.city} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`,
              variant: 'default'
            });
            return { ...item, ...updatedData, status: 'valid' as const };
          }
          return item;
        })
      );
      setIsVerifying(false);
    }, 2000);
  };

  const verifyAllInvalid = async () => {
    const invalidCount = data.filter(d => d.status === 'invalid').length;
    if (invalidCount === 0) {
      toast({
        title: '‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        description: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
      });
      return;
    }

    setIsVerifying(true);
    toast({
      title: 'üîç –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
      description: `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${invalidCount} –∑–∞–ø–∏—Å–µ–π...`
    });

    setTimeout(() => {
      setData(prevData => 
        prevData.map(item => {
          if (item.status === 'invalid') {
            const updatedData = getUpdatedData(item.city);
            return { ...item, ...updatedData, status: 'valid' as const };
          }
          return item;
        })
      );
      setIsVerifying(false);
      toast({
        title: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${invalidCount} –∑–∞–ø–∏—Å–µ–π`,
        variant: 'default'
      });
    }, 3000);
  };

  const exportToExcel = () => {
    const exportData = data.map(item => ({
      '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': item.district,
      '–†–µ–≥–∏–æ–Ω': item.region,
      '–ì–æ—Ä–æ–¥': item.city,
      '–ì–ª–∞–≤–∞': item.head,
      '–î–æ–ª–∂–Ω–æ—Å—Ç—å': item.position,
      'Email': item.email,
      '–¢–µ–ª–µ—Ñ–æ–Ω': item.phone,
      '–°—Ç–∞—Ç—É—Å': item.status === 'valid' ? '–ê–∫—Ç—É–∞–ª—å–Ω–æ' : item.status === 'invalid' ? '–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
    }));

    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–î–∞–Ω–Ω—ã–µ —Å—É–±—ä–µ–∫—Ç–æ–≤');
    
    const date = new Date().toISOString().split('T')[0];
    XLSX.writeFile(wb, `verified_data_${date}.xlsx`);
    
    toast({
      title: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω',
      description: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel',
      variant: 'default'
    });
  };

  const exportUpdatedOnly = () => {
    const updatedData = data.filter(item => item.status === 'valid').map(item => ({
      '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': item.district,
      '–†–µ–≥–∏–æ–Ω': item.region,
      '–ì–æ—Ä–æ–¥': item.city,
      '–ì–ª–∞–≤–∞': item.head,
      '–î–æ–ª–∂–Ω–æ—Å—Ç—å': item.position,
      'Email': item.email,
      '–¢–µ–ª–µ—Ñ–æ–Ω': item.phone,
      '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': new Date().toLocaleDateString('ru-RU')
    }));

    if (updatedData.length === 0) {
      toast({
        title: '‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
        description: '–û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º'
      });
      return;
    }

    const ws = XLSX.utils.json_to_sheet(updatedData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    
    const date = new Date().toISOString().split('T')[0];
    XLSX.writeFile(wb, `updated_data_${date}.xlsx`);
    
    toast({
      title: '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${updatedData.length} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`,
      variant: 'default'
    });
  };

  const getUpdatedData = (city: string): Partial<SubjectData> => {
    const updates: Record<string, Partial<SubjectData>> = {
      '–ê–ª–µ–∫—Å–µ–µ–≤–∫–∞': {
        head: '–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á',
        position: '–ì–ª–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞',
        email: 'admin@alekseevka.ru',
        phone: '+7 (47234) 3-10-20'
      },
      '–ê–ª—É–ø–∫–∞': {
        head: '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
        position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        email: 'info@alupka-city.ru',
        phone: '+7 (3654) 72-22-34'
      },
      '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': {
        head: '–ö—É–∑–Ω–µ—Ü–æ–≤ –î–º–∏—Ç—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
        position: '–ì–ª–∞–≤–∞ –≥–æ—Ä–æ–¥–∞ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞',
        email: 'mayor@arhcity.ru',
        phone: '+7 (8182) 60-71-01'
      }
    };
    return updates[city] || {};
  };

  const getStatusBadge = (status: string) => {
    const variants: Record<string, { variant: any; label: string; icon: string }> = {
      valid: { variant: 'default', label: '–ê–∫—Ç—É–∞–ª—å–Ω–æ', icon: 'CheckCircle2' },
      invalid: { variant: 'destructive', label: '–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', icon: 'XCircle' },
      pending: { variant: 'secondary', label: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', icon: 'Clock' }
    };
    
    const config = variants[status];
    return (
      <Badge variant={config.variant} className="flex items-center gap-1 w-fit">
        <Icon name={config.icon} size={14} />
        {config.label}
      </Badge>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <div className="container mx-auto p-6 max-w-7xl">
        <div className="mb-8 animate-fade-in">
          <h1 className="text-4xl font-bold text-slate-900 mb-2 flex items-center gap-3">
            <Icon name="Database" size={36} className="text-[#1EAEDB]" />
            –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
          </h1>
          <p className="text-slate-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É–±—ä–µ–∫—Ç–∞—Ö –†–§</p>
        </div>

        <Tabs defaultValue="table" className="space-y-6">
          <TabsList className="bg-white shadow-sm">
            <TabsTrigger value="table" className="flex items-center gap-2">
              <Icon name="Table" size={16} />
              –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            </TabsTrigger>
            <TabsTrigger value="reports" className="flex items-center gap-2">
              <Icon name="BarChart3" size={16} />
              –û—Ç—á–µ—Ç—ã
            </TabsTrigger>
          </TabsList>

          <TabsContent value="table" className="space-y-4 animate-fade-in">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card className="hover-scale">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-slate-600">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-slate-900">{stats.total}</div>
                </CardContent>
              </Card>
              
              <Card className="hover-scale border-green-200 bg-green-50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-green-700">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-green-600">{stats.valid}</div>
                  <Progress value={(stats.valid / stats.total) * 100} className="mt-2 h-1" />
                </CardContent>
              </Card>

              <Card className="hover-scale border-red-200 bg-red-50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-red-700">–¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-red-600">{stats.invalid}</div>
                  <Progress value={(stats.invalid / stats.total) * 100} className="mt-2 h-1" />
                </CardContent>
              </Card>

              <Card className="hover-scale border-blue-200 bg-blue-50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-blue-700">–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-blue-600">{stats.pending}</div>
                  <Progress value={(stats.pending / stats.total) * 100} className="mt-2 h-1" />
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <div>
                  <CardTitle>–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫</CardTitle>
                  <CardDescription>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</CardDescription>
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={verifyAllInvalid} 
                    disabled={isVerifying || stats.invalid === 0}
                    className="bg-[#1EAEDB] hover:bg-[#0EA5E9]"
                  >
                    <Icon name={isVerifying ? 'Loader2' : 'RefreshCw'} size={16} className={`mr-2 ${isVerifying ? 'animate-spin' : ''}`} />
                    –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ ({stats.invalid})
                  </Button>
                  <Button 
                    onClick={exportToExcel}
                    variant="outline"
                    className="hover-scale"
                  >
                    <Icon name="Download" size={16} className="mr-2" />
                    –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö
                  </Button>
                  <Button 
                    onClick={exportUpdatedOnly}
                    variant="outline"
                    className="hover-scale bg-green-50 hover:bg-green-100 border-green-200"
                  >
                    <Icon name="FileSpreadsheet" size={16} className="mr-2" />
                    –≠–∫—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="relative">
                    <Icon name="Search" size={18} className="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É, –≥–ª–∞–≤–µ, —Ä–µ–≥–∏–æ–Ω—É..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  
                  <Select value={filterDistrict} onValueChange={setFilterDistrict}>
                    <SelectTrigger>
                      <SelectValue placeholder="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">–í—Å–µ –æ–∫—Ä—É–≥–∞</SelectItem>
                      {districts.map(district => (
                        <SelectItem key={district} value={district}>{district}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger>
                      <SelectValue placeholder="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                      <SelectItem value="valid">–ê–∫—Ç—É–∞–ª—å–Ω–æ</SelectItem>
                      <SelectItem value="invalid">–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</SelectItem>
                      <SelectItem value="pending">–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle>–ó–∞–ø–∏—Å–∏ —Å—É–±—ä–µ–∫—Ç–æ–≤ ({filteredData.length})</CardTitle>
                <div className="flex gap-2">
                  <Button 
                    onClick={exportToExcel}
                    size="sm"
                    variant="outline"
                    className="hover-scale"
                  >
                    <Icon name="Download" size={14} className="mr-2" />
                    –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow className="bg-slate-50">
                        <TableHead>–û–∫—Ä—É–≥</TableHead>
                        <TableHead>–†–µ–≥–∏–æ–Ω</TableHead>
                        <TableHead>–ì–æ—Ä–æ–¥</TableHead>
                        <TableHead>–ì–ª–∞–≤–∞</TableHead>
                        <TableHead>–î–æ–ª–∂–Ω–æ—Å—Ç—å</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>–¢–µ–ª–µ—Ñ–æ–Ω</TableHead>
                        <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredData.map((item) => (
                        <TableRow key={item.id} className="hover:bg-slate-50 transition-colors">
                          <TableCell className="font-medium">{item.district}</TableCell>
                          <TableCell>{item.region}</TableCell>
                          <TableCell>{item.city}</TableCell>
                          <TableCell>{item.head}</TableCell>
                          <TableCell className="max-w-xs truncate">{item.position}</TableCell>
                          <TableCell>
                            <a href={`mailto:${item.email}`} className="text-[#1EAEDB] hover:underline flex items-center gap-1">
                              <Icon name="Mail" size={14} />
                              {item.email}
                            </a>
                          </TableCell>
                          <TableCell className="font-mono text-sm">{item.phone}</TableCell>
                          <TableCell>{getStatusBadge(item.status)}</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="hover-scale"
                                disabled={isVerifying || item.status === 'valid'}
                                onClick={() => verifyAndUpdateRecord(item.id)}
                                title={item.status === 'valid' ? '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã' : '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'}
                              >
                                <Icon name={isVerifying ? 'Loader2' : 'RefreshCw'} size={14} className={isVerifying ? 'animate-spin' : ''} />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reports" className="space-y-4 animate-fade-in">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="PieChart" size={20} className="text-[#1EAEDB]" />
                    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
                      <span className="text-2xl font-bold text-green-600">{((stats.valid / stats.total) * 100).toFixed(1)}%</span>
                    </div>
                    <Progress value={(stats.valid / stats.total) * 100} className="h-2" />
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium">–¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</span>
                      <span className="text-2xl font-bold text-red-600">{((stats.invalid / stats.total) * 100).toFixed(1)}%</span>
                    </div>
                    <Progress value={(stats.invalid / stats.total) * 100} className="h-2" />
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium">–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</span>
                      <span className="text-2xl font-bold text-blue-600">{((stats.pending / stats.total) * 100).toFixed(1)}%</span>
                    </div>
                    <Progress value={(stats.pending / stats.total) * 100} className="h-2" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="MapPin" size={20} className="text-[#1EAEDB]" />
                    –ü–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {districts.map(district => {
                      const count = data.filter(d => d.district === district).length;
                      const percentage = (count / stats.total) * 100;
                      return (
                        <div key={district} className="space-y-1">
                          <div className="flex justify-between items-center">
                            <span className="text-sm font-medium">{district}</span>
                            <span className="text-sm text-slate-600">{count} –∑–∞–ø–∏—Å–µ–π</span>
                          </div>
                          <Progress value={percentage} className="h-2" />
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>

              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="AlertCircle" size={20} className="text-[#ea384c]" />
                    –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                  </CardTitle>
                  <CardDescription>–î–∞–Ω–Ω—ã–µ, —Ç—Ä–µ–±—É—é—â–∏–µ —Å—Ä–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {data.filter(d => d.status === 'invalid').map(item => (
                      <div key={item.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-slate-50 transition-colors">
                        <div className="flex items-center gap-4">
                          <Icon name="AlertTriangle" size={20} className="text-[#ea384c]" />
                          <div>
                            <div className="font-medium">{item.city}, {item.region}</div>
                            <div className="text-sm text-slate-600">{item.head}</div>
                          </div>
                        </div>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="hover-scale"
                          onClick={() => verifyAndUpdateRecord(item.id)}
                          disabled={isVerifying}
                        >
                          <Icon name={isVerifying ? 'Loader2' : 'RefreshCw'} size={14} className={`mr-2 ${isVerifying ? 'animate-spin' : ''}`} />
                          –û–±–Ω–æ–≤–∏—Ç—å
                        </Button>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}